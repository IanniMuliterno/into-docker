name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  uberjar:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: install-dependencies
        run: lein deps
      - name: Run tests
        run: lein test
      - name: build-uberjar
        run: lein uberjar && mv target/*-standalone.jar target/app.jar
      - name: upload-uberjar
        uses: actions/upload-artifact@v1
        with:
          name: uberjar
          path: target/app.jar
      - name: build-standalone-jar
        run: |
          echo '#!/bin/sh' > into.jar
          echo 'SELF=`which "$0" 2>/dev/null`' >> into.jar
          echo '[ $? -gt 0 -a -f "$0" ] && SELF="./$0"' >> into.jar
          echo 'exec java -jar "$SELF" "$@"' >> into.jar
          echo 'exit 1' >> into.jar
          cat target/app.jar >> into.jar
          chmod +x into.jar
          zip app.zip into.jar
      - name: upload-standalone-jar
        uses: actions/upload-artifact@v1
        with:
          name: standalone-jar
          path: app.zip

  create-native-image-linux:
    strategy:
      matrix:
        build: ["linux-amd64", "linux-amd64-static"]
        include:
          - build: "linux-amd64"
            os: "ubuntu-latest"
            flags: ""
          - build: "linux-amd64-static"
            os: "ubuntu-latest"
            flags: "--static"
    needs: uberjar
    runs-on: ${{ matrix.os }}
    container: 'oracle/graalvm-ce:20.0.0-java11'
    steps:
      - name: setup-native-image
        run: gu install native-image
      - name: download-uberjar
        uses: actions/download-artifact@v1
        with:
          name: uberjar
      - name: native-image
        run: |
          native-image -jar uberjar/app.jar \
            -H:Name=into \
            --no-fallback \
            --no-server \
            ${{ matrix.flags }}
      - name: compress-native-image
        run: zip app.zip into
      - name: upload-native-image-zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: app.zip

  create-native-image-macos:
    strategy:
      matrix:
        build: ["macos-amd64"]
        include:
          - build: "macos-amd64"
            os: "macos-latest"
    needs: uberjar
    runs-on: ${{ matrix.os }}
    steps:
      - name: setup-graalvm-ce
        uses: DeLaGuardo/setup-graalvm@3
        with:
          graalvm-version: "20.0.0.java11"
      - name: setup-native-image
        run: gu install native-image
      - name: download-uberjar
        uses: actions/download-artifact@v1
        with:
          name: uberjar
      - name: native-image
        run: |
          native-image -jar uberjar/app.jar \
            -H:Name=into \
            --no-fallback \
            --no-server
      - name: compress-native-image
        run: zip app.zip into
      - name: upload-native-image-zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: app.zip

  create-release:
    needs: [ create-native-image-linux, create-native-image-macos ]
    runs-on: ubuntu-latest
    steps:
      - name: export-version
        id: version
        run: echo ::set-output name=value::${GITHUB_REF/refs\/tags\/v/}
      - name: create-release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ steps.version.outputs.value }}
          body: |
            Version ${{ steps.version.outputs.value }}
          draft: true
          prerelease: false
      - name: store-upload-url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > upload_url.txt
      - name: upload-release-data
        uses: actions/upload-artifact@v1
        with:
          name: release
          path: upload_url.txt

  upload-native-release-artifact:
    strategy:
      matrix:
        build: ["linux-amd64", "linux-amd64-static", "macos-amd64", "standalone-jar"]
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: fetch-release-data
        uses: actions/download-artifact@v1
        with:
          name: release
      - name: export-version
        id: version
        run: echo ::set-output name=value::${GITHUB_REF/refs\/tags\/v/}
      - name: export-upload-url
        id: upload_url
        run: echo ::set-output name=value::$(cat release/upload_url.txt)
      - name: download-native-image-zip
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.build }}
      - name: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_url.outputs.value }}
          asset_path: ./${{ matrix.build }}/app.zip
          asset_name: into-${{ steps.version.outputs.value}}-${{ matrix.build }}.zip
          asset_content_type: application/zip
